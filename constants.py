_NUM2TILE = (
    "5mr",
    "1m",
    "2m",
    "3m",
    "4m",
    "5m",
    "6m",
    "7m",
    "8m",
    "9m",
    "5pr",
    "1p",
    "2p",
    "3p",
    "4p",
    "5p",
    "6p",
    "7p",
    "8p",
    "9p",
    "5sr",
    "1s",
    "2s",
    "3s",
    "4s",
    "5s",
    "6s",
    "7s",
    "8s",
    "9s",
    "E",
    "S",
    "W",
    "N",
    "P",
    "F",
    "C",
)

_TILE2NUM = {}
for i, tile in enumerate(_NUM2TILE):
    _TILE2NUM[tile] = i

_TILE_OFFSETS = (
    0,
    1,
    5,
    9,
    13,
    17,
    20,
    24,
    28,
    32,
    36,
    37,
    41,
    45,
    49,
    53,
    56,
    60,
    64,
    68,
    72,
    73,
    77,
    81,
    85,
    89,
    92,
    96,
    100,
    104,
    108,
    112,
    116,
    120,
    124,
    128,
    132,
    136,
)

_NUM2CHI = (
    ("1m", ["2m", "3m"]),
    ("2m", ["1m", "3m"]),
    ("2m", ["3m", "4m"]),
    ("3m", ["1m", "2m"]),
    ("3m", ["2m", "4m"]),
    ("3m", ["4m", "5m"]),
    ("3m", ["4m", "5mr"]),
    ("4m", ["2m", "3m"]),
    ("4m", ["3m", "5m"]),
    ("4m", ["3m", "5mr"]),
    ("4m", ["5m", "6m"]),
    ("4m", ["5mr", "6m"]),
    ("5m", ["3m", "4m"]),
    ("5mr", ["3m", "4m"]),
    ("5m", ["4m", "6m"]),
    ("5mr", ["4m", "6m"]),
    ("5m", ["6m", "7m"]),
    ("5mr", ["6m", "7m"]),
    ("6m", ["4m", "5m"]),
    ("6m", ["4m", "5mr"]),
    ("6m", ["5m", "7m"]),
    ("6m", ["5mr", "7m"]),
    ("6m", ["7m", "8m"]),
    ("7m", ["5m", "6m"]),
    ("7m", ["5mr", "6m"]),
    ("7m", ["6m", "8m"]),
    ("7m", ["8m", "9m"]),
    ("8m", ["6m", "7m"]),
    ("8m", ["7m", "9m"]),
    ("9m", ["7m", "8m"]),
    ("1p", ["2p", "3p"]),
    ("2p", ["1p", "3p"]),
    ("2p", ["3p", "4p"]),
    ("3p", ["1p", "2p"]),
    ("3p", ["2p", "4p"]),
    ("3p", ["4p", "5p"]),
    ("3p", ["4p", "5pr"]),
    ("4p", ["2p", "3p"]),
    ("4p", ["3p", "5p"]),
    ("4p", ["3p", "5pr"]),
    ("4p", ["5p", "6p"]),
    ("4p", ["5pr", "6p"]),
    ("5p", ["3p", "4p"]),
    ("5pr", ["3p", "4p"]),
    ("5p", ["4p", "6p"]),
    ("5pr", ["4p", "6p"]),
    ("5p", ["6p", "7p"]),
    ("5pr", ["6p", "7p"]),
    ("6p", ["4p", "5p"]),
    ("6p", ["4p", "5pr"]),
    ("6p", ["5p", "7p"]),
    ("6p", ["5pr", "7p"]),
    ("6p", ["7p", "8p"]),
    ("7p", ["5p", "6p"]),
    ("7p", ["5pr", "6p"]),
    ("7p", ["6p", "8p"]),
    ("7p", ["8p", "9p"]),
    ("8p", ["6p", "7p"]),
    ("8p", ["7p", "9p"]),
    ("9p", ["7p", "8p"]),
    ("1s", ["2s", "3s"]),
    ("2s", ["1s", "3s"]),
    ("2s", ["3s", "4s"]),
    ("3s", ["1s", "2s"]),
    ("3s", ["2s", "4s"]),
    ("3s", ["4s", "5s"]),
    ("3s", ["4s", "5sr"]),
    ("4s", ["2s", "3s"]),
    ("4s", ["3s", "5s"]),
    ("4s", ["3s", "5sr"]),
    ("4s", ["5s", "6s"]),
    ("4s", ["5sr", "6s"]),
    ("5s", ["3s", "4s"]),
    ("5sr", ["3s", "4s"]),
    ("5s", ["4s", "6s"]),
    ("5sr", ["4s", "6s"]),
    ("5s", ["6s", "7s"]),
    ("5sr", ["6s", "7s"]),
    ("6s", ["4s", "5s"]),
    ("6s", ["4s", "5sr"]),
    ("6s", ["5s", "7s"]),
    ("6s", ["5sr", "7s"]),
    ("6s", ["7s", "8s"]),
    ("7s", ["5s", "6s"]),
    ("7s", ["5sr", "6s"]),
    ("7s", ["6s", "8s"]),
    ("7s", ["8s", "9s"]),
    ("8s", ["6s", "7s"]),
    ("8s", ["7s", "9s"]),
    ("9s", ["7s", "8s"]),
)

_CHI2NUM = {}
for i, (tile, consumed) in enumerate(_NUM2CHI):
    k = (tile, tuple(consumed))
    _CHI2NUM[k] = i

_CHI_COUNTS = []
for tile, consumed in _NUM2CHI:
    tile = _TILE2NUM[tile]
    counts = {}
    for t in consumed:
        t = _TILE2NUM[t]
        if t not in counts:
            counts[t] = 0
        counts[t] += 1
    _CHI_COUNTS.append((tile, counts))

_CHI_TO_KUIKAE_TILES = (
    (
        1,
        4,
    ),  # (2m, 3m, 1m) => 1m, 4m
    (2,),  # (1m, 3m, 2m) => 2m
    (
        2,
        0,
        5,
    ),  # (3m, 4m, 2m) => 2m, 0m, 5m
    (3,),  # (1m, 2m, 3m) => 3m
    (3,),  # (2m, 4m, 3m) => 3m
    (
        3,
        6,
    ),  # (4m, 5m, 3m) => 3m, 6m
    (
        3,
        6,
    ),  # (4m, 0m, 3m) => 3m, 6m
    (
        1,
        4,
    ),  # (2m, 3m, 4m) => 1m, 4m
    (4,),  # (3m, 5m, 4m) => 4m
    (4,),  # (3m, 0m, 4m) => 4m
    (
        4,
        7,
    ),  # (5m, 6m, 4m) => 4m, 7m
    (
        4,
        7,
    ),  # (0m, 6m, 4m) => 4m, 7m
    (
        0,
        2,
        5,
    ),  # (3m, 4m, 5m) => 2m, 0m, 5m
    (
        2,
        5,
    ),  # (3m, 4m, 0m) => 2m, 5m
    (
        0,
        5,
    ),  # (4m, 6m, 5m) => 0m, 5m
    (5,),  # (4m, 6m, 0m) => 5m
    (
        0,
        5,
        8,
    ),  # (6m, 7m, 5m) => 0m, 5m, 8m
    (
        5,
        8,
    ),  # (6m, 7m, 0m) => 5m, 8m
    (
        3,
        6,
    ),  # (4m, 5m, 6m) => 3m, 6m
    (
        3,
        6,
    ),  # (4m, 0m, 6m) => 3m, 6m
    (6,),  # (5m, 7m, 6m) => 6m
    (6,),  # (0m, 7m, 6m) => 6m
    (
        6,
        9,
    ),  # (7m, 8m, 6m) => 6m, 9m
    (
        4,
        7,
    ),  # (5m, 6m, 7m) => 4m, 7m
    (
        4,
        7,
    ),  # (0m, 6m, 7m) => 4m, 7m
    (7,),  # (6m, 8m, 7m) => 7m
    (7,),  # (8m, 9m, 7m) => 7m
    (
        0,
        5,
        8,
    ),  # (6m, 7m, 8m) => 0m, 5m, 8m
    (8,),  # (7m, 9m, 8m) => 8m
    (
        6,
        9,
    ),  # (7m, 8m, 9m) => 9m
    (
        11,
        14,
    ),  # (2p, 3p, 1p) => 1p, 4p
    (12,),  # (1p, 3p, 2p) => 2p
    (
        12,
        10,
        15,
    ),  # (3p, 4p, 2p) => 2p, 0p, 5p
    (13,),  # (1p, 2p, 3p) => 3p
    (13,),  # (2p, 4p, 3p) => 3p
    (
        13,
        16,
    ),  # (4p, 5p, 3p) => 3p, 6p
    (
        13,
        16,
    ),  # (4p, 0p, 3p) => 3p, 6p
    (
        11,
        14,
    ),  # (2p, 3p, 4p) => 1p, 4p
    (14,),  # (3p, 5p, 4p) => 4p
    (14,),  # (3p, 0p, 4p) => 4p
    (
        14,
        17,
    ),  # (5p, 6p, 4p) => 4p, 7p
    (
        14,
        17,
    ),  # (0p, 6p, 4p) => 4p, 7p
    (
        10,
        12,
        15,
    ),  # (3p, 4p, 5p) => 2p, 0p, 5p
    (
        12,
        15,
    ),  # (3p, 4p, 0p) => 2p, 5p
    (
        10,
        15,
    ),  # (4p, 6p, 5p) => 0p, 5p
    (15,),  # (4p, 6p, 0p) => 5p
    (
        10,
        15,
        18,
    ),  # (6p, 7p, 5p) => 0p, 5p, 8p
    (
        15,
        18,
    ),  # (6p, 7p, 0p) => 5p, 8p
    (
        13,
        16,
    ),  # (4p, 5p, 6p) => 3p, 6p
    (
        13,
        16,
    ),  # (4p, 0p, 6p) => 3p, 6p
    (16,),  # (5p, 7p, 6p) => 6p
    (16,),  # (0p, 7p, 6p) => 6p
    (
        16,
        19,
    ),  # (7p, 8p, 6p) => 6p, 9p
    (
        14,
        17,
    ),  # (5p, 6p, 7p) => 4p, 7p
    (
        14,
        17,
    ),  # (0p, 6p, 7p) => 4p, 7p
    (17,),  # (6p, 8p, 7p) => 7p
    (17,),  # (8p, 9p, 7p) => 7p
    (
        10,
        15,
        18,
    ),  # (6p, 7p, 8p) => 0p, 5p, 8p
    (18,),  # (7p, 9p, 8p) => 8p
    (
        16,
        19,
    ),  # (7p, 8p, 9p) => 9p
    (
        21,
        24,
    ),  # (2s, 3s, 1s) => 1s, 4s
    (22,),  # (1s, 3s, 2s) => 2s
    (
        22,
        20,
        25,
    ),  # (3s, 4s, 2s) => 2s, 0s, 5s
    (23,),  # (1s, 2s, 3s) => 3s
    (23,),  # (2s, 4s, 3s) => 3s
    (
        23,
        26,
    ),  # (4s, 5s, 3s) => 3s, 6s
    (
        23,
        26,
    ),  # (4s, 0s, 3s) => 3s, 6s
    (
        21,
        24,
    ),  # (2s, 3s, 4s) => 1s, 4s
    (24,),  # (3s, 5s, 4s) => 4s
    (24,),  # (3s, 0s, 4s) => 4s
    (
        24,
        27,
    ),  # (5s, 6s, 4s) => 4s, 7s
    (
        24,
        27,
    ),  # (0s, 6s, 4s) => 4s, 7s
    (
        20,
        22,
        25,
    ),  # (3s, 4s, 5s) => 2s, 0s, 5s
    (
        22,
        25,
    ),  # (3s, 4s, 0s) => 2s, 5s
    (
        20,
        25,
    ),  # (4s, 6s, 5s) => 0s, 5s
    (25,),  # (4s, 6s, 0s) => 5s
    (
        20,
        25,
        28,
    ),  # (6s, 7s, 5s) => 0s, 5s, 8s
    (
        25,
        28,
    ),  # (6s, 7s, 0s) => 5s, 8s
    (
        23,
        26,
    ),  # (4s, 5s, 6s) => 3s, 6s
    (
        23,
        26,
    ),  # (4s, 0s, 6s) => 3s, 6s
    (26,),  # (5s, 7s, 6s) => 6s
    (26,),  # (0s, 7s, 6s) => 6s
    (
        26,
        29,
    ),  # (7s, 8s, 6s) => 6s, 9s
    (
        24,
        27,
    ),  # (5s, 6s, 7s) => 4s, 7s
    (
        24,
        27,
    ),  # (0s, 6s, 7s) => 4s, 7s
    (27,),  # (6s, 8s, 7s) => 7s
    (27,),  # (8s, 9s, 7s) => 7s
    (
        20,
        25,
        28,
    ),  # (6s, 7s, 8s) => 0s, 5s, 8s
    (28,),  # (7s, 9s, 8s) => 8s
    (
        26,
        29,
    ),  # (7s, 8s, 9s) => 9s
)

_NUM2PENG = (
    ("1m", ["1m", "1m"]),
    ("2m", ["2m", "2m"]),
    ("3m", ["3m", "3m"]),
    ("4m", ["4m", "4m"]),
    ("5m", ["5m", "5m"]),
    ("5m", ["5mr", "5m"]),
    ("5mr", ["5m", "5m"]),
    ("6m", ["6m", "6m"]),
    ("7m", ["7m", "7m"]),
    ("8m", ["8m", "8m"]),
    ("9m", ["9m", "9m"]),
    ("1p", ["1p", "1p"]),
    ("2p", ["2p", "2p"]),
    ("3p", ["3p", "3p"]),
    ("4p", ["4p", "4p"]),
    ("5p", ["5p", "5p"]),
    ("5p", ["5pr", "5p"]),
    ("5pr", ["5p", "5p"]),
    ("6p", ["6p", "6p"]),
    ("7p", ["7p", "7p"]),
    ("8p", ["8p", "8p"]),
    ("9p", ["9p", "9p"]),
    ("1s", ["1s", "1s"]),
    ("2s", ["2s", "2s"]),
    ("3s", ["3s", "3s"]),
    ("4s", ["4s", "4s"]),
    ("5s", ["5s", "5s"]),
    ("5s", ["5sr", "5s"]),
    ("5sr", ["5s", "5s"]),
    ("6s", ["6s", "6s"]),
    ("7s", ["7s", "7s"]),
    ("8s", ["8s", "8s"]),
    ("9s", ["9s", "9s"]),
    ("E", ["E", "E"]),
    ("S", ["S", "S"]),
    ("W", ["W", "W"]),
    ("N", ["N", "N"]),
    ("P", ["P", "P"]),
    ("F", ["F", "F"]),
    ("C", ["C", "C"]),
)

_PENG2NUM = {}
for i, (tile, consumed) in enumerate(_NUM2PENG):
    k = (tile, tuple(consumed))
    _PENG2NUM[k] = i

_PENG_COUNTS = []
for tile, consumed in _NUM2PENG:
    tile = _TILE2NUM[tile]
    counts = {}
    for t in consumed:
        t = _TILE2NUM[t]
        if t not in counts:
            counts[t] = 0
        counts[t] += 1
    _PENG_COUNTS.append((tile, counts))

_PENG_TO_KUIKAE_TILE = (
    1,  # (1m, 1m, 1m) => 1m
    2,  # (2m, 2m, 2m) => 2m
    3,  # (3m, 3m, 3m) => 3m
    4,  # (4m, 4m, 4m) => 4m
    0,  # (5m, 5m, 5m) => 0m
    5,  # (0m, 5m, 5m) => 5m
    5,  # (5m, 5m, 0m) => 5m
    6,  # (6m, 6m, 6m) => 6m
    7,  # (7m, 7m, 7m) => 7m
    8,  # (8m, 8m, 8m) => 8m
    9,  # (9m, 9m, 9m) => 9m
    11,  # (1p, 1p, 1p) => 1p
    12,  # (2p, 2p, 2p) => 2p
    13,  # (3p, 3p, 3p) => 3p
    14,  # (4p, 4p, 4p) => 4p
    10,  # (5p, 5p, 5p) => 0p
    15,  # (0p, 5p, 5p) => 5p
    15,  # (5p, 5p, 0p) => 5p
    16,  # (6p, 6p, 6p) => 6p
    17,  # (7p, 7p, 7p) => 7p
    18,  # (8p, 8p, 8p) => 8p
    19,  # (9p, 9p, 9p) => 9p
    21,  # (1s, 1s, 1s) => 1s
    22,  # (2s, 2s, 2s) => 2s
    23,  # (3s, 3s, 3s) => 3s
    24,  # (4s, 4s, 4s) => 4s
    20,  # (5s, 5s, 5s) => 0s
    25,  # (0s, 5s, 5s) => 5s
    25,  # (5s, 5s, 0s) => 5s
    26,  # (6s, 6s, 6s) => 6s
    27,  # (7s, 7s, 7s) => 7s
    28,  # (8s, 8s, 8s) => 8s
    29,  # (9s, 9s, 9s) => 9s
    30,  # (1z, 1z, 1z) => 1z
    31,  # (2z, 2z, 2z) => 2z
    32,  # (3z, 3z, 3z) => 3z
    33,  # (4z, 4z, 4z) => 4z
    34,  # (5z, 5z, 5z) => 5z
    35,  # (6z, 6z, 6z) => 6z
    36,  # (7z, 7z, 7z) => 7z
)

_NUM2DAMINGGANG = (
    ("5mr", ["5m", "5m", "5m"]),
    ("1m", ["1m", "1m", "1m"]),
    ("2m", ["2m", "2m", "2m"]),
    ("3m", ["3m", "3m", "3m"]),
    ("4m", ["4m", "4m", "4m"]),
    ("5m", ["5mr", "5m", "5m"]),
    ("6m", ["6m", "6m", "6m"]),
    ("7m", ["7m", "7m", "7m"]),
    ("8m", ["8m", "8m", "8m"]),
    ("9m", ["9m", "9m", "9m"]),
    ("5pr", ["5p", "5p", "5p"]),
    ("1p", ["1p", "1p", "1p"]),
    ("2p", ["2p", "2p", "2p"]),
    ("3p", ["3p", "3p", "3p"]),
    ("4p", ["4p", "4p", "4p"]),
    ("5p", ["5pr", "5p", "5p"]),
    ("6p", ["6p", "6p", "6p"]),
    ("7p", ["7p", "7p", "7p"]),
    ("8p", ["8p", "8p", "8p"]),
    ("9p", ["9p", "9p", "9p"]),
    ("5sr", ["5s", "5s", "5s"]),
    ("1s", ["1s", "1s", "1s"]),
    ("2s", ["2s", "2s", "2s"]),
    ("3s", ["3s", "3s", "3s"]),
    ("4s", ["4s", "4s", "4s"]),
    ("5s", ["5sr", "5s", "5s"]),
    ("6s", ["6s", "6s", "6s"]),
    ("7s", ["7s", "7s", "7s"]),
    ("8s", ["8s", "8s", "8s"]),
    ("9s", ["9s", "9s", "9s"]),
    ("E", ["E", "E", "E"]),
    ("S", ["S", "S", "S"]),
    ("W", ["W", "W", "W"]),
    ("N", ["N", "N", "N"]),
    ("P", ["P", "P", "P"]),
    ("F", ["F", "F", "F"]),
    ("C", ["C", "C", "C"]),
)

_DAMINGGANG2NUM = {}
for i, (tile, consumed) in enumerate(_NUM2DAMINGGANG):
    k = (tile, tuple(consumed))
    _DAMINGGANG2NUM[k] = i

_DAMINGGANG_COUNTS = []
for tile, consumed in _NUM2DAMINGGANG:
    counts = {}
    for t in consumed:
        t = _TILE2NUM[t]
        if t not in counts:
            counts[t] = 0
        counts[t] += 1
    _DAMINGGANG_COUNTS.append(counts)

_NUM2ANGANG = (
    ["1m", "1m", "1m", "1m"],
    ["2m", "2m", "2m", "2m"],
    ["3m", "3m", "3m", "3m"],
    ["4m", "4m", "4m", "4m"],
    ["5mr", "5m", "5m", "5m"],
    ["6m", "6m", "6m", "6m"],
    ["7m", "7m", "7m", "7m"],
    ["8m", "8m", "8m", "8m"],
    ["9m", "9m", "9m", "9m"],
    ["1p", "1p", "1p", "1p"],
    ["2p", "2p", "2p", "2p"],
    ["3p", "3p", "3p", "3p"],
    ["4p", "4p", "4p", "4p"],
    ["5pr", "5p", "5p", "5p"],
    ["6p", "6p", "6p", "6p"],
    ["7p", "7p", "7p", "7p"],
    ["8p", "8p", "8p", "8p"],
    ["9p", "9p", "9p", "9p"],
    ["1s", "1s", "1s", "1s"],
    ["2s", "2s", "2s", "2s"],
    ["3s", "3s", "3s", "3s"],
    ["4s", "4s", "4s", "4s"],
    ["5sr", "5s", "5s", "5s"],
    ["6s", "6s", "6s", "6s"],
    ["7s", "7s", "7s", "7s"],
    ["8s", "8s", "8s", "8s"],
    ["9s", "9s", "9s", "9s"],
    ["E", "E", "E", "E"],
    ["S", "S", "S", "S"],
    ["W", "W", "W", "W"],
    ["N", "N", "N", "N"],
    ["P", "P", "P", "P"],
    ["F", "F", "F", "F"],
    ["C", "C", "C", "C"],
)

_ANGANG2NUM = {}
for i, consumed in enumerate(_NUM2ANGANG):
    k = tuple(consumed)
    _ANGANG2NUM[k] = i

_ANGANG_COUNTS = []
for consumed in _NUM2ANGANG:
    counts = {}
    for tile in consumed:
        tile = _TILE2NUM[tile]
        if tile not in counts:
            counts[tile] = 0
        counts[tile] += 1
    _ANGANG_COUNTS.append(counts)

_JIAGANG_LIST = (
    1,  # (1m, 1m, 1m) + 1m
    2,  # (2m, 2m, 2m) + 2m
    3,  # (3m, 3m, 3m) + 3m
    4,  # (4m, 4m, 4m) + 4m
    0,  # (5m, 5m, 5m) + 0m
    5,  # (0m, 5m, 5m) + 5m
    5,  # (5m, 5m, 0m) + 5m
    6,  # (6m, 6m, 6m) + 6m
    7,  # (7m, 7m, 7m) + 7m
    8,  # (8m, 8m, 8m) + 8m
    9,  # (9m, 9m, 9m) + 9m
    11,  # (1p, 1p, 1p) + 1p
    12,  # (2p, 2p, 2p) + 2p
    13,  # (3p, 3p, 3p) + 3p
    14,  # (4p, 4p, 4p) + 4p
    10,  # (5p, 5p, 5p) + 0p
    15,  # (0p, 5p, 5p) + 5p
    15,  # (5p, 5p, 0p) + 5p
    16,  # (6p, 6p, 6p) + 6p
    17,  # (7p, 7p, 7p) + 7p
    18,  # (8p, 8p, 8p) + 8p
    19,  # (9p, 9p, 9p) + 9p
    21,  # (1s, 1s, 1s) + 1s
    22,  # (2s, 2s, 2s) + 2s
    23,  # (3s, 3s, 3s) + 3s
    24,  # (4s, 4s, 4s) + 4s
    20,  # (5s, 5s, 5s) + 0s
    25,  # (0s, 5s, 5s) + 5s
    25,  # (5s, 5s, 0s) + 5s
    26,  # (6s, 6s, 6s) + 6s
    27,  # (7s, 7s, 7s) + 7s
    28,  # (8s, 8s, 8s) + 8s
    29,  # (9s, 9s, 9s) + 9s
    30,  # (1z, 1z, 1z) + 1z
    31,  # (2z, 2z, 2z) + 2z
    32,  # (3z, 3z, 3z) + 3z
    33,  # (4z, 4z, 4z) + 4z
    34,  # (5z, 5z, 5z) + 5z
    35,  # (6z, 6z, 6z) + 6z
    36,  # (7z, 7z, 7z) + 7z
)

_NUM2JIAGANG = (
    ("5mr", ["5m", "5m", "5m"]),
    ("1m", ["1m", "1m", "1m"]),
    ("2m", ["2m", "2m", "2m"]),
    ("3m", ["3m", "3m", "3m"]),
    ("4m", ["4m", "4m", "4m"]),
    ("5m", ["5mr", "5m", "5m"]),
    ("6m", ["6m", "6m", "6m"]),
    ("7m", ["7m", "7m", "7m"]),
    ("8m", ["8m", "8m", "8m"]),
    ("9m", ["9m", "9m", "9m"]),
    ("5pr", ["5p", "5p", "5p"]),
    ("1p", ["1p", "1p", "1p"]),
    ("2p", ["2p", "2p", "2p"]),
    ("3p", ["3p", "3p", "3p"]),
    ("4p", ["4p", "4p", "4p"]),
    ("5p", ["5pr", "5p", "5p"]),
    ("6p", ["6p", "6p", "6p"]),
    ("7p", ["7p", "7p", "7p"]),
    ("8p", ["8p", "8p", "8p"]),
    ("9p", ["9p", "9p", "9p"]),
    ("5sr", ["5s", "5s", "5s"]),
    ("1s", ["1s", "1s", "1s"]),
    ("2s", ["2s", "2s", "2s"]),
    ("3s", ["3s", "3s", "3s"]),
    ("4s", ["4s", "4s", "4s"]),
    ("5s", ["5sr", "5s", "5s"]),
    ("6s", ["6s", "6s", "6s"]),
    ("7s", ["7s", "7s", "7s"]),
    ("8s", ["8s", "8s", "8s"]),
    ("9s", ["9s", "9s", "9s"]),
    ("E", ["E", "E", "E"]),
    ("S", ["S", "S", "S"]),
    ("W", ["W", "W", "W"]),
    ("N", ["N", "N", "N"]),
    ("P", ["P", "P", "P"]),
    ("F", ["F", "F", "F"]),
    ("C", ["C", "C", "C"]),
)

_JIAGANG_TO_PENG_LIST = (
    (4,),
    (0,),
    (1,),
    (2,),
    (3,),
    (
        5,
        6,
    ),
    (7,),
    (8,),
    (9,),
    (10,),
    (15,),
    (11,),
    (12,),
    (13,),
    (14,),
    (
        16,
        17,
    ),
    (18,),
    (19,),
    (20,),
    (21,),
    (26,),
    (22,),
    (23,),
    (24,),
    (25,),
    (
        27,
        28,
    ),
    (29,),
    (30,),
    (31,),
    (32,),
    (33,),
    (34,),
    (35,),
    (36,),
    (37,),
    (38,),
    (39,),
)

_TILE_TO_JIAGANG_COUNTS = []
for i, v in enumerate(_NUM2JIAGANG):
    tile, consumed = v
    counts = {}
    for t in consumed:
        if t not in counts:
            counts[t] = 0
        counts[t] += 1
    _TILE_TO_JIAGANG_COUNTS.append(counts)

_TILE34TILE37 = (
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
)
